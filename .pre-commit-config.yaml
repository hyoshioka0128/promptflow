# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks

exclude: '(^docs/)|flows|scripts|src/promptflow-azure/promptflow/azure/_restclient/|src/promptflow-core/promptflow/core/_connection_provider/_models/|src/promptflow-azure/promptflow/azure/_models/|src/promptflow/tests/test_configs|src/promptflow-tools|src/promptflow-devkit/promptflow/_sdk/_service/static'

repos:
    - repo: https://github.com/pre-commit/pre-commit-hooks
      rev: v3.2.0
      hooks:
          - id: trailing-whitespace
          - id: end-of-file-fixer
          - id: check-yaml
          - id: check-json
          - id: check-merge-conflict
    - repo: https://github.com/psf/black
      rev: 22.3.0 # Replace by any tag/version: https://github.com/psf/black/tags
      hooks:
          - id: black
            language_version: python3 # Should be a command that runs python3.6+
            args:
                - "--line-length=120"
    - repo: https://github.com/pre-commit/pre-commit-hooks
      rev: v2.3.0
      hooks:
          - id: flake8
    # Temporary disable this since it gets stuck when updating env
    - repo: https://github.com/streetsidesoftware/cspell-cli
      rev: v7.3.0
      hooks:
      - id: cspell
        args: ['--config', '.cspell.json', "--no-must-find-files"]
    - repo: https://github.com/hadialqattan/pycln
      rev: v2.1.2 # Possible releases: https://github.com/hadialqattan/pycln/tags
      hooks:
          - id: pycln
            name: "Clean unused python imports"
            args: [--config=setup.cfg]
    - repo: https://github.com/pycqa/isort
      rev: 5.12.0
      hooks:
        - id: isort
          # stages: [commit]
          name: isort-python
          # Use black profile for isort to avoid conflicts
          # see https://github.com/PyCQA/isort/issues/1518
          args: ["--profile", "black", --line-length=120]
    - repo: local
      hooks:
        - id: pylint
          name: pylint
          entry: python
          language: system
          args: [ -m, pylint, --rcfile=pylintrc, --output-format=parseable ]
          types: [python]
    - repo: local
      hooks:
      - id: pylint-dependencies-check
        name: pylint-dependencies-check
        entry: python
        language: system
        types: [python]
        args:
        - "-c"
        - |
            import os
            import sys

            import pkg_resources

            # These are the versions that run in our CI
            dependencies = [
                (
                    "azure-pylint-guidelines-checker",
                    "0.3.1",
                    [
                        "--index-url",
                        "https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-python/pypi/simple/",
                    ],
                ),
                ("pylint", "3.0.3", []),
            ]

            # Make sure that correct versions are installed
            for packagename, required_version, install_args in dependencies:
                try:
                    version = pkg_resources.get_distribution(packagename).version
                    assert version == required_version
                except AssertionError:
                    print(
                        f"Version mismatch: Installed version '{version}' of '{packagename}' does not match required version {required_version}"
                    )
                except pkg_resources.DistributionNotFound:
                    print(f"Package '{packagename}' is not installed")
                else:
                    continue

                print(f"Please run the following command to install the correct version of {packagename}")
                print(f"\tpython -m pip install {packagename}=={required_version} {' '.join(install_args)}")
                sys.exit(1)
